{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ERROR, STORE_UPDATED, CONFIGURE, ACCOUNT_CONFIGURED, ACCOUNT_CHANGED, TRY_CONNECT_WALLET } from './constants';\nimport stores from './';\nimport Web3 from 'web3';\n\nclass Store {\n  constructor(dispatcher, emitter) {\n    _defineProperty(this, \"configure\", async () => {// if (window.ethereum) {\n      //   window.web3 = new Web3(ethereum);\n      //   try {\n      //     await ethereum.enable();\n      //     var accounts= await web3.eth.getAccounts();\n      //     this.setStore({ account: { address: accounts[0] }, web3: window.web3 })\n      //     this.emitter.emit(ACCOUNT_CONFIGURED)\n      //   } catch (error) {\n      //     // User denied account access...\n      //   }\n      //\n      //   this.updateAccount()\n      //\n      // } else if (window.web3) {\n      //   window.web3 = new Web3(web3.currentProvider);\n      //   // Acccounts always exposed\n      //   web3.eth.sendTransaction({/* ... */});\n      // }\n      // // Non-dapp browsers...\n      // else {\n      //   console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n      // }\n    });\n\n    _defineProperty(this, \"updateAccount\", () => {\n      const that = this;\n      const res = window.ethereum.on('accountsChanged', function (accounts) {\n        that.setStore({\n          account: {\n            address: accounts[0]\n          }\n        });\n        that.emitter.emit(ACCOUNT_CHANGED);\n        that.emitter.emit(ACCOUNT_CONFIGURED);\n      });\n    });\n\n    _defineProperty(this, \"getWeb3Provider\", async () => {\n      let web3context = this.getStore('web3context');\n      let provider = null;\n\n      if (!web3context) {\n        provider = network.providers['1'];\n      } else {\n        provider = web3context.library.provider;\n      }\n\n      if (!provider) {\n        return null;\n      }\n\n      return new Web3(provider);\n    });\n\n    _defineProperty(this, \"tryConnectWallet\", async () => {\n      if (window.ethereum) {\n        window.web3 = new Web3(ethereum);\n\n        try {\n          await ethereum.enable();\n          var accounts = await web3.eth.getAccounts();\n          this.setStore({\n            account: {\n              address: accounts[0]\n            },\n            web3: window.web3\n          });\n          this.emitter.emit(ACCOUNT_CONFIGURED);\n        } catch (error) {// User denied account access...\n        }\n      } // Legacy dapp browsers...\n      else if (window.web3) {\n          window.web3 = new Web3(web3.currentProvider);\n          var accounts = await web3.eth.getAccounts();\n          this.setStore({\n            account: {\n              address: accounts[0]\n            },\n            web3: window.web3\n          });\n          this.emitter.emit(ACCOUNT_CONFIGURED);\n        } // Non-dapp browsers...\n        else {\n            console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n          }\n    });\n\n    this.dispatcher = dispatcher;\n    this.emitter = emitter;\n    this.store = {\n      account: null,\n      web3: null\n    };\n    dispatcher.register(function (payload) {\n      switch (payload.type) {\n        case CONFIGURE:\n          this.configure(payload);\n          break;\n\n        case TRY_CONNECT_WALLET:\n          this.tryConnectWallet(payload);\n          break;\n\n        default:\n          {}\n      }\n    }.bind(this));\n  }\n\n  getStore(index) {\n    return this.store[index];\n  }\n\n  setStore(obj) {\n    this.store = _objectSpread(_objectSpread({}, this.store), obj);\n    return this.emitter.emit(STORE_UPDATED);\n  }\n\n}\n\nexport default Store;","map":{"version":3,"sources":["C:/Forks/networklist-org-main/stores/accountStore.js"],"names":["ERROR","STORE_UPDATED","CONFIGURE","ACCOUNT_CONFIGURED","ACCOUNT_CHANGED","TRY_CONNECT_WALLET","stores","Web3","Store","constructor","dispatcher","emitter","that","res","window","ethereum","on","accounts","setStore","account","address","emit","web3context","getStore","provider","network","providers","library","web3","enable","eth","getAccounts","error","currentProvider","console","log","store","register","payload","type","configure","tryConnectWallet","bind","index","obj"],"mappings":"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","sourcesContent":["import {\n  ERROR,\n  STORE_UPDATED,\n  CONFIGURE,\n  ACCOUNT_CONFIGURED,\n  ACCOUNT_CHANGED,\n  TRY_CONNECT_WALLET,\n} from './constants';\n\nimport stores from './'\n\nimport Web3 from 'web3';\n\nclass Store {\n  constructor(dispatcher, emitter) {\n\n    this.dispatcher = dispatcher\n    this.emitter = emitter\n\n    this.store = {\n      account: null,\n      web3: null,\n    }\n\n    dispatcher.register(\n      function (payload) {\n        switch (payload.type) {\n          case CONFIGURE:\n            this.configure(payload);\n            break;\n          case TRY_CONNECT_WALLET:\n            this.tryConnectWallet(payload)\n            break;\n          default: {\n          }\n        }\n      }.bind(this)\n    );\n  }\n\n  getStore(index) {\n    return(this.store[index]);\n  };\n\n  setStore(obj) {\n    this.store = {...this.store, ...obj}\n    return this.emitter.emit(STORE_UPDATED);\n  };\n\n  configure = async () => {\n    // if (window.ethereum) {\n    //   window.web3 = new Web3(ethereum);\n    //   try {\n    //     await ethereum.enable();\n    //     var accounts= await web3.eth.getAccounts();\n    //     this.setStore({ account: { address: accounts[0] }, web3: window.web3 })\n    //     this.emitter.emit(ACCOUNT_CONFIGURED)\n    //   } catch (error) {\n    //     // User denied account access...\n    //   }\n    //\n    //   this.updateAccount()\n    //\n    // } else if (window.web3) {\n    //   window.web3 = new Web3(web3.currentProvider);\n    //   // Acccounts always exposed\n    //   web3.eth.sendTransaction({/* ... */});\n    // }\n    // // Non-dapp browsers...\n    // else {\n    //   console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    // }\n  };\n\n  updateAccount = () => {\n    const that = this\n    const res = window.ethereum.on('accountsChanged', function (accounts) {\n      that.setStore({ account: { address: accounts[0] } })\n      that.emitter.emit(ACCOUNT_CHANGED)\n      that.emitter.emit(ACCOUNT_CONFIGURED)\n    })\n  }\n\n  getWeb3Provider = async () => {\n    let web3context = this.getStore('web3context')\n    let provider = null\n\n    if(!web3context) {\n      provider = network.providers['1']\n    } else {\n      provider = web3context.library.provider\n    }\n\n    if(!provider) {\n      return null\n    }\n    return new Web3(provider);\n\n  }\n\n  tryConnectWallet = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(ethereum);\n      try {\n        await ethereum.enable();\n        var accounts= await web3.eth.getAccounts();\n        this.setStore({ account: { address: accounts[0] }, web3: window.web3 })\n        this.emitter.emit(ACCOUNT_CONFIGURED)\n      } catch (error) {\n          // User denied account access...\n      }\n    }\n    // Legacy dapp browsers...\n    else if (window.web3) {\n      window.web3 = new Web3(web3.currentProvider);\n      var accounts= await web3.eth.getAccounts();\n      this.setStore({ account: { address: accounts[0] }, web3: window.web3 })\n      this.emitter.emit(ACCOUNT_CONFIGURED)\n    }\n    // Non-dapp browsers...\n    else {\n      console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n}\n\nexport default Store;\n"]},"metadata":{},"sourceType":"module"}